#include <fstream>
#include <queue>

using namespace std;

ifstream fin ("date.in");
ofstream fout ("date.out");

int dx[4]={1, 0, -1, 0};
int dy[4]={0, 1, 0, -1};

unsigned int xc, yc, xv, yv;
unsigned int i, j, q;

struct maze
{
    unsigned int nrLinii;
    unsigned int nrColoane;
    unsigned int xi, yi, xf, yf;
    int celula[100][100];
};

maze A;
queue <int> Qx;
queue <int> Qy;

unsigned int minRouteLength(maze A)
{
    int B[A.nrLinii][A.nrColoane];
    for (i=1; i<=A.nrLinii; i++)
    {
        for (j=1; j<=A.nrColoane; j++)
        {
            B[i][j]=0x3f3f3f;
        }
    }
    Qx.push(A.xi); Qy.push(A.yi); B[A.xi][A.yi]=0;
    while (!Qx.empty())
    {
        xc=Qx.front(); yc=Qy.front(); Qx.pop(); Qy.pop();
        for (i=0; i<4; i++)
        {
            xv=xc+dx[i];
            yv=yc+dy[i];
            if (xv>=1&&xv<=A.nrLinii&&yv>=1&&yv<=A.nrColoane)
            {
                if (A.celula[xv][yv]==0&&B[xv][yv]>B[xc][yc]+1)
                {
                    B[xv][yv]=B[xc][yc]+1;
                    Qx.push(xv); Qy.push(yv);
                }
            }
        }
    }
    return B[A.xf][A.yf];
}

int main()
{
    fin >> A.nrLinii >> A.nrColoane >> A.xi >> A.yi >> A.xf >> A.yf;
    for (i=1; i<=A.nrLinii; i++)
    {
        for (j=1; j<=A.nrColoane; j++)
        {
            fin >> A.celula[i][j];
        }
    }
    fout << minRouteLength(A);
}
