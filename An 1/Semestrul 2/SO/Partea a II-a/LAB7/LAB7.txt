Exerciții de programare C cu prelucrări de fișiere :

1. Să se scrie un program C care primește de la linia de comandă numele unui fișier și afișează numărul de apariții pentru fiecare caracter ce apare în acel fișier. 
(Indicație: printr-o singură parcurgere a fișierului, calculați de câte ori apare fiecare caracter ASCII posibil, i.e. orice octet cuprins între 0 și 255.)

2. Să se implementeze o clonă simplificată pentru comanda find, care funcționează astfel: se primește un singur parametru, reprezentând numele exact al fișierului care este căutat. Căutarea se face în directorul home al utilizatorului curent, parcurgând recursiv întreaga structură de subdirectoare ale acestuia. Se va afișa calea spre fiecare rezultat al căutarii. În plus, în caz de eroare, programul va afișa un mesaj explicit și se va închide "elegant", returnând și un cod de terminare specific erorii apărute. 
(Indicație: parcurgeți directorul cu șablonul dat la curs și, pentru fiecare intrare din director ce are numele dat, afișați calea ei, iar pentru fiecare intrare ce este de tip director, apelați recursiv funcția de parcurgere.)

3. Să se scrie un program C care să afișeze tipul, dimensiunea, permisiunile și proprietarul tuturor fișierelor și subdirectoarelor din directorul dat ca argument (parcurs recursiv). 
(Indicație: parcurgeți directorul cu șablonul dat la curs și, pentru fiecare intrare din director, utilizați primitiva stat pentru a afla datele cerute în enunț.)

Exerciții suplimentare:

Alte câteva exerciții de programare C cu prelucrări de fișiere:

4. Să se scrie un program C care să realizeze prelucrările descrise în continuare. Într-un fișier text sunt scrise numere întregi. Să se calculeze media aritmetică pentru fiecare grup de numere cuprinse între două numere cu valoarea zero din fișier. Să se scrie valorile respective pe câte o linie distinctă dintr-un alt fișier text (rezultat). Începutul și sfârșitul fișierului cu numere joacă rolul unui număr cu valoarea zero. Numele fișierelor sursă și destinație se specifică drept argumente la linia de comandă a programului.

5. Într-un fișier text sunt scrise linii de text sub forma: două numere întregi urmate de un caracter, ce poate fi '+', '-', '*' sau '/'. Să se scrie un program C care citește linia a N-a din fișier, efectuează operația dintre cele două numere și apoi scrie într-un alt fișier text o linie de forma:   nr1 operator nr2 = rezultat  . Linia de rezultat se va adăuga la sfârșitul fișierului rezultat. Numărul de ordine N al liniei vizate din fișierul text sursă, precum și numele fișierului sursă și al celui rezultat se specifică drept argumente în linia de comandă.

6. Să se scrie un program C care să implementeze comanda wc, inclusiv cu opțiunile sale -c, -w, -l și -L. 
(Atenție: se cere să se scrie cod C care realizează aceeași funcționalitate ca și comanda wc, deci nu în sensul ca să apelați direct comanda wc dintr-un program C folosind funcția system().) 

Observație (valabilă și pentru celelalte exerciții suplimentare ce sunt similare cu acest exercițiu): 
implementarea comenzii cmd, inclusiv a opțiunii -o, presupune următoarele lucruri: 
- implementarea comportamentului implicit al comenzii cmd:   cmd nume_fisier 
- și implementarea opțiunii precizate în enunț:   cmd -o nume_fisier

7. Să se scrie un program C care să implementeze comanda cp, inclusiv cu opțiunile sale -i și -u. 
(Atenție: se cere să se scrie cod C care realizează aceeași funcționalitate ca și comanda cp, deci nu în sensul ca să apelați direct comanda cp dintr-un program C folosind funcția system(). SIMILAR și pentru următoarele exerciții !)

8. Să se scrie un program C care scrie în ordine inversă liniile unui fișier text într-un alt fișier text (similar cu comanda tac). Numele ambelor fișiere se specifică drept argumente în linia de comandă a programului.

9. Să se scrie un program C ce implementează comanda rm, inclusiv cu opțiunile -i și -r. Se va permite precizarea de argumente multiple de tip nume de fișiere sau directoare.

10. Să se scrie un program C ce implementează comanda tail, inclusiv cu opțiunile -n și -c. Se va permite precizarea de argumente multiple de tip nume de fișiere.

11. Să se scrie un program C ce implementează comanda mv, inclusiv cu opțiunile -i, -u și -t. Se va permite precizarea mai multor fișiere sursă și a unui singur fișier/director destinație.

12. Să se scrie un program C ce implementează comanda ls, inclusiv cu opțiunile sale -l și -a. Se va permite precizarea de argumente multiple de tip nume de fișiere sau directoare.

13. Să se scrie un program C ce implementează o variantă interactivă a comenzii chmod, ce va afișa meniuri text pentru schimbarea permisiunilor fișierelor.

14. Să se scrie un program C care șterge toate legăturile simbolice "rupte" (i.e. legături ale căror destinații nu mai există) aflate într-un director, dat ca parametru, sau în subdirectoarele lui (parcurse recursiv).
