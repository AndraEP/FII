TRIVIAL

The simplest possible lex program: it has no patterns except the "default" pattern that matches everything, and has no rules except the "default" rule that prints the pattern to stdout. In other words, it copies stdin to stdout.
		%%



Copied out of the "flex" man page, replaces the word "username" wherever it appears in the input with the username of the person who's logged in right now; otherwise it copies stdin unaltered to stdout.
		%%
		username printf("%s",getlogin());



Also copied out of the "flex" man page, counts the number of lines and characters in the input file. Note that it uses the special symbol "." to match any character other than a newline.
		int num_lines = 0, num_chars = 0;

		%%
		\n	++num_lines; ++num_chars;
		.	++num_chars;
		%%
		int main ()
		{
			yylex ();
			printf ("There were %d lines and %d characters.\n",
			num_lines, num_chars);
			return 0;
		}



Implements the Caesar cipher: it replaces every letter with the one three letters after in in alphabetical order, wrapping around at Z. It uses character ranges "[a-z]" and "[A-Z]", which match any lower-case letter and any upper-case letter respectively.
		%%
		[a-z]	{ char ch = yytext[0];
          		ch += 3;
          		if (ch > 'z') ch -= ('z'+1-'a');
          		printf ("%c", ch);
        		}
          
		[A-Z]	{ char ch = yytext[0];
         		ch += 3;
          		if (ch > 'Z') ch -= ('Z'+1-'A');
          		printf ("%c", ch);
        		}
		%%

		SAU

		%%
		[a-wA-W]	printf ("%c", yytext[0]+3);
		[xyzXYZ]	printf ("%c", yytext[0]-23);
		%%



Finds the longest word (defined as a contiguous string of upper and lower case letters) in the input.
		%{
		#include <strings.h>
		int longest = 0;
		char longword[60];
		%}
		%%
		[a-zA-Z]+	{ if (yyleng > longest) {
		                     longest = yyleng;
		                     strcpy (longword, yytext);
		                     }
		                }
		.	|
		\n	;
		%%
		int main (void) {
		   yylex ();
		   printf ("The longest word was \"%s\", which was %d characters long.\n", longword, longest);
		   return 0;
		}



Categorizes a number of words as verbs and nonverbs.
		%{
		/* this sample demonstrates very simple word recognition: verbs 	& other */
		%}
		%%
		[\t ]+		/* ignore whitespace */ ;
		is		|
		am		|
		are		|
		were		|
		was		|
		be		|
		being		|
		been		|
		do		|
		does		|
		did		|
		will		|
		would		|
		should		|
		can		|
		could		|
		has		|
		have		|
		had		|
		go		{ printf ("\"%s\" is a verb\n", yytext); }
		[a-zA-Z]+	{ printf ("\"%s\" is not a verb\n", yytext); }
		.		|
		\n		ECHO; /* which is the default anyway */
		%%
		int main (void) {
			return yylex ();
		}



Reads and interprets Roman numerals.
		%{
		int total = 0;
		%}
		WS	[ \t]+
		%%
			I	total += 1;
			IV	total += 4;
			V	total += 5;
			IX	total += 9;
			X	total += 10;
			XL	total += 40;
			L	total += 50;
			XC	total += 90;
			C	total += 100;
			CD	total += 400;
			D	total += 500;
			CM	total += 900;
			M	total += 1000;
			{WS}	|
			\n	return total;
		%%
		int main (void) {
		   int first, second;
		   first = yylex ();
		   second = yylex ();
		   printf ("%d + %d = %d\n", first, second, first+second);
		   return 0;
		   }






int main(int argc, char** argv)
{
	
FILE *g;

	if(argc>1)
 
		yyin = fopen(argv[1],"r");

	else yyin=fopen("test.txt","r");
	
yylex();

}



%%
int k;
[0-9]+   {
          k = atoi(yytext);
          if (k%7 == 0)
              printf("%d", k+3);
          else
              printf("%d",k);
         }
